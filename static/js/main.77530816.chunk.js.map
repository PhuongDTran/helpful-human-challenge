{"version":3,"sources":["data/colorsList.js","logic/controller.js","components/Cell.js","components/FormRow.js","PrimaryWrapper.js","index.js"],"names":["getRandomColor","color","i","Math","floor","random","colorsList","colors","numColors","colorsSet","Set","size","add","iterator","values","push","next","value","makeColorList","sliceColors","begin","end","startIndex","endIndex","length","slice","Cell","props","styles","button","width","height","background","hexCode","borderRadius","cursor","Paper","style","display","flexDirection","Button","component","Link","to","FormRow","row","Grid","item","key","container","justify","alignItems","spacing","App","useState","Number","currentPage","setCurrentPage","pages","setPages","query","URLSearchParams","useLocation","search","useEffect","listOfPages","pageNumber","get","numberClicked","e","target","getAttribute","className","AppBar","position","backgroundColor","margin","InputBase","placeholder","inputProps","square","elevation","padding","textAlign","path","render","paddingTop","rows","beginIndex","colorDisplayed","makeColorsGrid","numbersList","selector","onClick","textDecoration","formNumberSelection","ReactDOM","basename","document","getElementById"],"mappings":"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","file":"static/js/main.77530816.chunk.js","sourcesContent":["\n\n/**\n * make a random color\n * https://stackoverflow.com/questions/1484506/random-color-generator\n */\nconst getRandomColor = () => {\n  var letters = '0123456789abcdef';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n/**\n * return a list of unique colors.\n */\nconst makeColorList = (numColors) => {\n  let colorsSet = new Set();\n  while (colorsSet.size < numColors) {\n    colorsSet.add(getRandomColor());\n  }\n  let colorsList = [];\n  const iterator = colorsSet.values();\n  for (let i = 0 ; i < colorsSet.size ; i++) {\n    colorsList.push(iterator.next().value);\n  }\n  return colorsList;\n}\n\nlet colorsList = null;\nconst numColors = 100;\n\nexport const colors = () => {\n  if (colorsList === null) {\n    colorsList = makeColorList(numColors);\n  }\n  return colorsList;\n}","import {colors} from '../data/colorsList';\n\n/**\n * return the whole list of colors\n */\nexport function getColors(){\n  return colors();\n}\n\n/**\n * return the size of the color list\n */\nexport function getSize() {\n  return colors().length;\n}\n\n\nexport function sliceColors(begin, end) {\n  let startIndex = begin >= 0 ? begin : 0;\n  let endIndex = end > colors().length ? colors().length : end;\n  return colors().slice(startIndex, endIndex);\n}","import React from 'react';\nimport {Paper, Button} from '@material-ui/core';\nimport { Link} from \"react-router-dom\";\n\n\nfunction Cell(props) {\n  const styles = {\n    button: {\n      width: props.width,\n      height: props.height,\n      background: props.hexCode,\n      borderRadius: \"5px\",\n      cursor: \"pointer\"\n    }\n  }\n\n  return (\n    <Paper style={{display: \"flex\", flexDirection: \"column\"}}>\n      <Button component={Link} to={`/detailview/?color=${props.hexCode}`} style={styles.button} value={props.hexCode}> </Button>\n      <label>{props.hexCode}</label>\n    </Paper>\n  )\n}\n\n\nexport default Cell;\n","import React from 'react';\nimport { Grid } from '@material-ui/core';\n\nimport Cell from './Cell';\n\n\n// colors is a list of colors per row\n// return the FormRow components that contains Cell components\nexport default function FormRow({ colors }){\n  let row = [];\n  for (let color of colors) {\n    row.push(\n      <Grid item key={color}>\n        <Cell key={color} height=\"200px\" width=\"200px\" hexCode={color} />\n      </Grid>\n    );\n  }\n  return (\n    <Grid container justify=\"space-evenly\" alignItems=\"center\" item spacing={2}>\n      {row}\n    </Grid>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { AppBar, InputBase, Paper, Button, Grid } from '@material-ui/core';\nimport { sliceColors, getSize } from './logic/controller';\nimport { HashRouter, Link, Route, Redirect, useLocation } from \"react-router-dom\";\n\n\nimport FormRow from './components/FormRow';\n\n// css\nimport './App.css';\n\n\n\nexport default function PrimaryWrapper() {\n  return (\n    <HashRouter basename='/'>\n        <App />\n    </HashRouter>\n  )\n}\n\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction App() {\n  const colorsPerRow = 4;\n  const numColorsPerPage = 12;\n  const [currentPage, setCurrentPage] = useState(Number(1));\n  const [pages, setPages] = useState([]);\n\n  let query = useQuery();\n\n\n  // run once when the page loaded to compute how many pages needed\n  // and the number of colors per page\n  useEffect(() => {\n    let numColors = Number(getSize());\n    let listOfPages = [];\n    while (numColors > 0) {\n      if (numColors >= numColorsPerPage) {\n        listOfPages.push(numColorsPerPage);\n      } else {\n        listOfPages.push(numColors);\n      }\n      numColors -= numColorsPerPage;\n    }\n    setPages(listOfPages);\n  }, []);\n\n  useEffect(() => {\n    const pageNumber = Number(query.get(\"page\"));\n    if (pageNumber > 0) {\n      setCurrentPage(pageNumber);\n    }\n  }, [query])\n\n  // make list of FormRow components\n  const makeColorsGrid = () => {\n    let rows = [];\n    let numColors = Number(pages[currentPage - 1]);\n    let beginIndex = numColors * (currentPage - 1);\n    let colorDisplayed = 0;\n    while (colorDisplayed < numColors) {\n      const colors = sliceColors(beginIndex, beginIndex + colorsPerRow);\n      rows.push(\n        <FormRow key={beginIndex} colors={colors} />\n      )\n      beginIndex += colorsPerRow;\n      colorDisplayed += colors.length;\n    }\n    return rows;\n  }\n\n\n  // handle a link clicked\n  const numberClicked = (e) => {\n    const pageNumber = Number(e.target.getAttribute('value'));\n    setCurrentPage(pageNumber);\n  }\n\n  // create number selection list at the bottom of the page\n  const formNumberSelection = () => {\n    let numbersList = [];\n    let selector = null;\n    for (let i = 1; i <= pages.length; i++) {\n      if (i === currentPage) {\n        selector = (\n          <Grid item key={i}>\n            <Link value={i} to={`/listview/?page=${i}`} onClick={numberClicked}>{i}</Link>\n          </Grid>\n        );\n      } else {\n        selector = (\n          <Grid item key={i}>\n            <Link value={i} to={`/listview/?page=${i}`} style={{ textDecoration: 'none' }} onClick={numberClicked}>{i}</Link>\n          </Grid>\n        );\n      }\n      numbersList.push(selector);\n\n    }\n    return numbersList;\n  }\n\n  return (\n    <div className=\"Main\">\n      <AppBar position=\"static\" style={{backgroundColor: '#363636'}}>\n        <div style={{ position: 'relative', margin: '10px 5px 10px auto', width: '20vw', backgroundColor: 'white', borderRadius: '3px' }}>\n          <InputBase\n            placeholder=\"Search…\"\n            inputProps={{ 'aria-label': 'search' }}\n          />\n        </div>\n      </AppBar>\n\n      <div style={{ display: \"flex\", flexDirection: \"row\", height: \"100vh\" }}>\n        {/* side bar */}\n        <div>\n          <Paper square elevation={3} style={{ width: \"15vw\", height: \"100vh\", backgroundColor: \"#cdcdcd\", padding: \"5% 0 5vh 0\", textAlign: \"center\" }}>\n            <Button style={{backgroundColor: '#ffffff'}}>Random Color</Button>\n          </Paper>\n        </div>\n\n        <Route path=\"/\" render={() => (\n            <Redirect to='/listview/' />\n          )} />\n        <Route path='/listview/' render={() => (\n          <div style={{ paddingTop: \"10px\" }}>\n            <Grid container justify=\"center\" alignItems=\"center\" spacing={3}>\n              {makeColorsGrid()}\n            </Grid>\n            <Grid container item justify=\"center\" alignItems=\"center\" spacing={3} style={{ position: \"relative\" }}>\n              {formNumberSelection()}\n            </Grid>\n          </div>\n\n        )} />\n\n        <Route path='/detailview/' render={() => (\n          <div><h1>this unfinished detail view</h1></div>\n        )} />\n      </div>\n\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PrimaryWrapper from './PrimaryWrapper';\nReactDOM.render(<PrimaryWrapper />, document.getElementById('root'));\n\n"],"sourceRoot":""}